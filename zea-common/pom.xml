<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd">
    <parent>
        <groupId>com.zea.cloud</groupId>
        <artifactId>zea-cloud</artifactId>
        <version>1.0</version>
    </parent>
    <modelVersion>4.0.0</modelVersion>
    <packaging>jar</packaging>
    <artifactId>zea-common</artifactId>

    <properties>
        <java.version>17</java.version>
        <maven.compiler.target>17</maven.compiler.target>
        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
    </properties>

    <dependencies>
        <!--web-->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-web</artifactId>
        </dependency>
        <!--aop切面-->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-aop</artifactId>
        </dependency>
        <!-- mybatis-plus -->
        <dependency>
            <groupId>com.baomidou</groupId>
            <artifactId>mybatis-plus-boot-starter</artifactId>
            <version>${mybatis-plus.version}</version>
        </dependency>
        <!--redis-->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-data-redis</artifactId>
        </dependency>
    </dependencies>

<!--    <build>-->
<!--        <plugins>-->
<!--            &lt;!&ndash;注意：-->
<!--            spring-boot-maven-plugin 默认的打包方式（没有显示配置repackage）是不会把依赖的jar包也进行打包的，因此是不可执行的。-->
<!--            需要显示的配置 repackage，这样就会将依赖的jar包也进行打包，创建一个自动可执行的jar或war文件。-->
<!--            <executions>-->
<!--                <execution>-->
<!--                    <id>repackage</id>-->
<!--                    <goals>-->
<!--                        <goal>repackage</goal>-->
<!--                    </goals>-->
<!--                </execution>-->
<!--            </executions>-->
<!--            想要jar或者war包可执行就需要有启动类（即有main方法的类）。-->
<!--            因此spring-boot-maven-plugin插件配置了repackage目标后会去寻找启动类。-->
<!--            然而common模块没有启动类，所以出现报错：Unable to find main class。-->
<!--            因此，当common的父项目配置了spring-boot-maven-plugin插件及其repackage目标，-->
<!--            那么在common的pom文件中就需要配置spring-boot-maven-plugin插件并跳过 repackage。-->
<!--            <executions>-->
<!--                <execution>-->
<!--                    <id>repackage</id>-->
<!--                    <goals>-->
<!--                        <goal>repackage</goal>-->
<!--                    </goals>-->
<!--                    <configuration>-->
<!--                        <skip>true</skip>-->
<!--                    </configuration>-->
<!--                </execution>-->
<!--            </executions>-->
<!--            &ndash;&gt;-->
<!--            <plugin>-->
<!--                <groupId>org.springframework.boot</groupId>-->
<!--                <artifactId>spring-boot-maven-plugin</artifactId>-->
<!--                <version>3.1.3</version>-->
<!--                <configuration>-->
<!--                    &lt;!&ndash;maven打包的jar包输出的位置&ndash;&gt;-->
<!--                    <outputDirectory>../output</outputDirectory>-->
<!--                </configuration>-->
<!--                &lt;!&ndash;这里这么配置是防止未来有人在父类pom中添加了repackage打包目标导致common打包失败&ndash;&gt;-->
<!--                <executions>-->
<!--                    <execution>-->
<!--                        <id>repackage</id>-->
<!--                        <goals>-->
<!--                            <goal>repackage</goal>-->
<!--                        </goals>-->
<!--                        &lt;!&ndash; 跳过 repackage &ndash;&gt;-->
<!--                        <configuration>-->
<!--                            <skip>true</skip>-->
<!--                        </configuration>-->
<!--                    </execution>-->
<!--                </executions>-->
<!--            </plugin>-->
<!--        </plugins>-->
<!--    </build>-->

</project>
