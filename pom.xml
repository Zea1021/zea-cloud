<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>
    <modules>
        <module>zea-basic</module>
        <module>zea-biz</module>
        <module>gateway</module>
        <module>zea-user</module>
        <module>zea-common</module>
    </modules>
    <parent>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-starter-parent</artifactId>
        <version>3.0.9</version>
        <relativePath/> <!-- lookup parent from repository -->
    </parent>
    <groupId>com.zea.cloud</groupId>
    <artifactId>zea-cloud</artifactId>
    <version>0.0.1-SNAPSHOT</version>
    <packaging>pom</packaging>
    <name>zea-cloud</name>
    <description>zea-cloud</description>
    <!-- properties主要用来定义常量，通过${value}来使用。-->
    <properties>
        <java.version>17</java.version>
        <spring.cloud.alibaba.version>2022.0.0.0-RC1</spring.cloud.alibaba.version>
        <spring.cloud.version>2022.0.0</spring.cloud.version>
        <spring.boot.version>3.0.9</spring.boot.version>
        <mysql-connector.version>8.0.30</mysql-connector.version>
        <druid.client.version>1.2.16</druid.client.version>
        <log4j.client.version>1.2.17</log4j.client.version>
        <mybatis-plus.version>3.5.3.1</mybatis-plus.version>
        <xxl-job.version>2.4.0</xxl-job.version>
        <minio-client.version>8.4.5</minio-client.version>
        <lombok-client.version>1.18.28</lombok-client.version>
        <rocketmq-client.version>2.2.3</rocketmq-client.version>
        <springboot-validation.version>3.0.9</springboot-validation.version>
    </properties>
    <dependencies>
        <!--web-->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-web</artifactId>
        </dependency>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-test</artifactId>
            <scope>test</scope>
        </dependency>
        <!--2021.0.5版本起，Spring Cloud将不再默认启用bootstrap包，需手动导入-->
        <dependency>
            <groupId>org.springframework.cloud</groupId>
            <artifactId>spring-cloud-starter-bootstrap</artifactId>
        </dependency>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-validation</artifactId>
        </dependency>
        <!--日志-->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-logging</artifactId>
        </dependency>
        <!--lombook-->
        <dependency>
            <groupId>org.projectlombok</groupId>
            <artifactId>lombok</artifactId>
        </dependency>
        <!--Json序列化-->
        <dependency>
            <groupId>com.alibaba</groupId>
            <artifactId>fastjson</artifactId>
            <version>2.0.32</version>
        </dependency>
        <!--tool-->
        <dependency>
            <groupId>org.apache.commons</groupId>
            <artifactId>commons-lang3</artifactId>
        </dependency>
    </dependencies>

    <profiles>
        <profile>
            <id>dev</id>
            <!--激活条件 其中默认为该profile-->
            <activation>
                <activeByDefault>true</activeByDefault>
            </activation>
            <!--当此profile被激活时，会将 project.active 的属性赋值为dev -->
            <properties>
                <project.active>dev</project.active>
            </properties>
        </profile>
        <profile>
            <id>test</id>
            <!--当此profile被激活时，会将 project.active 的属性赋值为test -->
            <properties>
                <project.active>test</project.active>
            </properties>
        </profile>
    </profiles>

    <!-- 使用dependencyManagement可以统一管理项目的版本号，
    确保应用的各个项目的依赖和版本一致，不用每个模块项目都弄一个版本号，不利于管理，
    当需要变更版本号的时候只需要在父类容器里更新，不需要任何一个子项目的修改；
    如果某个子项目需要另外一个特殊的版本号时，只需要在自己的模块dependencies中声明一个版本号即可。
    子类就会使用子类声明的版本号，不继承于父类版本号。 -->
    <!-- 注意：dependencyManagement只是声明依赖，并不自动实现引入。
    而所有声明在dependencies里的依赖都会自动引入，并默认被所有的子项目继承 -->
    <dependencyManagement>
        <dependencies>
            <!--spring  cloud alibaba 的版本管理-->
            <dependency>
                <groupId>com.alibaba.cloud</groupId>
                <artifactId>spring-cloud-alibaba-dependencies</artifactId>
                <version>${spring.cloud.alibaba.version}</version>
                <type>pom</type>
                <scope>import</scope>
            </dependency>
            <!--spring  cloud  的版本管理-->
            <dependency>
                <groupId>org.springframework.cloud</groupId>
                <artifactId>spring-cloud-dependencies</artifactId>
                <version>${spring.cloud.version}</version>
                <type>pom</type>
                <scope>import</scope>
            </dependency>
            <!--spring  boot  的版本管理-->
            <dependency>
                <groupId>org.springframework.boot</groupId>
                <artifactId>spring-boot-dependencies</artifactId>
                <version>${spring.boot.version}</version>
                <type>pom</type>
                <scope>import</scope>
            </dependency>
        </dependencies>
    </dependencyManagement>

    <build>
        <plugins>
            <plugin>
                <groupId>org.springframework.boot</groupId>
                <artifactId>spring-boot-maven-plugin</artifactId>
            </plugin>
            <plugin>
                <!-- 用于声明编译的相关配置，若不声明，则maven采用默认的相关配置 -->
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-compiler-plugin</artifactId>
                <version>3.8.0</version>
                <!--插件配置-->
                <configuration>
                    <!--声明源代码的jdk版本-->
                    <source>17</source>
                    <!--声明生成目标的jdk版本-->
                    <target>17</target>
                    <!--声明编译文件的编码-->
                    <encoding>UTF-8</encoding>
                </configuration>
            </plugin>
        </plugins>
        <!-- resources标签用来标识项目在编译运行时需要额外编译的文件。例如手工引入jar包、不同运行环境对应不同的profile。-->
<!--        <resources>-->
<!--            <resource>-->

<!--            </resource>-->
<!--        </resources>-->
    </build>
</project>
