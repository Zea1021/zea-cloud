<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd">
    <!--定义pom文件所遵守的版本-->
    <modelVersion>4.0.0</modelVersion>
    <!--定义聚合的子模块-->
    <modules>
        <module>zea-basic</module>
        <module>zea-admin</module>
        <module>zea-gateway</module>
        <module>zea-user</module>
        <module>zea-common</module>
        <module>zea-tool</module>
    </modules>
    <!--spring-boot-starter-parent中定义了大量的pluginManagement插件管理 和 一个 spring-boot-dependencies 依赖版本管理。
    但该插件管理只有在 POM 中配置了真正的 plugin 元素，且其 groupId 和 artifactId 与 pluginManagement 元素中配置的插件匹配时，
    spring-boot-starter-parent中的 pluginManagement 元素的配置才会影响到实际的插件的配置及其行为。
    同样的，只有在 POM 中配置了真正的 dependency 元素，且其 groupId 和 artifactId 与 spring-boot-dependencies 元素中配置的依赖匹配时，
    spring-boot-starter-parent中的 spring-boot-dependencies 元素的配置才会影响到实际的依赖的配置及其行为-->
    <!--<parent>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-starter-parent</artifactId>
        <version>3.0.9</version>
        <relativePath/> &lt;!&ndash; lookup parent from repository &ndash;&gt;
    </parent>-->
    <groupId>com.zea.cloud</groupId>
    <artifactId>zea-cloud</artifactId>
    <version>1.0</version>
    <!-- Maven 在设计时，借鉴了 Java 面向对象中的继承思想，提出了 POM 继承思想。
    当一个项目包含多个模块时，可以在该项目中再创建一个父模块，并在其 POM 中声明依赖，其他模块的 POM 可通过继承父模块的 POM 来获得对相关依赖的声明。
    对于父模块而言，其目的是为了消除子模块 POM 中的重复配置，其中不包含有任何实际代码，因此父模块 POM 的打包类型（packaging）必须是 pom。-->
    <packaging>pom</packaging>
    <name>zea-cloud</name>
    <description>zea-cloud</description>
    <!-- properties主要用来定义常量，项目及其子项目可以通过${value}来使用。-->
    <properties>
        <java.version>17</java.version>
        <spring.cloud.alibaba.version>2022.0.0.0-RC1</spring.cloud.alibaba.version>
        <spring.cloud.version>2022.0.0</spring.cloud.version>
        <spring.boot.version>3.0.9</spring.boot.version>
        <mysql-connector.version>8.0.30</mysql-connector.version>
        <druid.client.version>1.2.16</druid.client.version>
        <log4j.client.version>1.2.17</log4j.client.version>
        <mybatis-plus.version>3.5.3.1</mybatis-plus.version>
        <xxl-job.version>2.4.0</xxl-job.version>
        <minio-client.version>8.4.5</minio-client.version>
        <lombok-client.version>1.18.28</lombok-client.version>
        <rocketmq-client.version>2.2.3</rocketmq-client.version>
        <springboot-validation.version>3.2.0</springboot-validation.version>
        <fastjson.version>2.0.32</fastjson.version>
        <maven.plugin.version>3.1.3</maven.plugin.version>
        <lock4j.version>2.2.4</lock4j.version>
        <hutool.version>5.8.24</hutool.version>
        <spring.oauth2.version>2.2.1.RELEASE</spring.oauth2.version>
    </properties>
    <!--所有声明在dependencies里的依赖都会自动引入，并默认被所有的子项目继承-->
    <dependencies>
        <!--2021.0.5版本起，Spring Cloud将不再默认启用bootstrap包，需手动导入-->
        <dependency>
            <groupId>org.springframework.cloud</groupId>
            <artifactId>spring-cloud-starter-bootstrap</artifactId>
        </dependency>
        <!--日志-->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-logging</artifactId>
        </dependency>
        <!--lombok-->
        <dependency>
            <groupId>org.projectlombok</groupId>
            <artifactId>lombok</artifactId>
        </dependency>
    </dependencies>

    <profiles>
        <profile>
            <id>dev</id>
            <!--激活条件 其中默认为该profile-->
            <activation>
                <activeByDefault>true</activeByDefault>
            </activation>
            <!--当此profile被激活时，会将 project.active 的属性赋值为dev -->
            <properties>
                <project.active>dev</project.active>
            </properties>
        </profile>
        <profile>
            <id>test</id>
            <!--当此profile被激活时，会将 project.active 的属性赋值为test -->
            <properties>
                <project.active>test</project.active>
            </properties>
        </profile>
    </profiles>

    <!--
    使用dependencyManagement可以统一管理子项目的版本号。
    注意：dependencyManagement只是声明依赖，并没有真的把依赖引入到项目中。
    当子类自己引入没有指定版本号的依赖时，如果dependencyManagement中存在该依赖，那么子类引入的依赖的版本号为dependencyManagement中的版本号。
    -->
    <dependencyManagement>
        <dependencies>
            <!--spring  cloud alibaba 的版本管理-->
            <dependency>
                <groupId>com.alibaba.cloud</groupId>
                <artifactId>spring-cloud-alibaba-dependencies</artifactId>
                <version>${spring.cloud.alibaba.version}</version>
                <type>pom</type>
                <scope>import</scope>
            </dependency>
            <!--spring  cloud  的版本管理-->
            <dependency>
                <groupId>org.springframework.cloud</groupId>
                <artifactId>spring-cloud-dependencies</artifactId>
                <version>${spring.cloud.version}</version>
                <type>pom</type>
                <scope>import</scope>
            </dependency>
            <!--maven和Java一样都是单继承机制。现在有个问题，我现在想使用spring-boot-starter-parent提供的依赖管理，
            但是我又不想继承他，因为我这个项目后续还要继承别的项目，所以在上面把 spring-boot-starter-parent 给注释了-->
            <!--但我又想使用 spring-boot-starter-parent 中的 spring-boot-dependencies 的依赖版本管理。
            maven当中有<type>pom</type>和<scope>import</scope> ，通过这两个标签在dependencyManagement中声明依赖，
            可以替代继承（达到类似parent标签的作用，解决了单继承问题）。-->
            <dependency>
                <groupId>org.springframework.boot</groupId>
                <artifactId>spring-boot-dependencies</artifactId>
                <!--<artifactId>spring-boot-parent</artifactId>-->
                <version>${spring.boot.version}</version>
                <!--申明类型为POM，而不是Jar-->
                <type>pom</type>
                <!--注：import 依赖范围只能与 dependencyManagement 元素配合使用才会有效，其功能是将目标 pom.xml
                中的 dependencyManagement 配置导入合并到当前 pom.xml 的 dependencyManagement 中。
                如果改为<artifactId>spring-boot-parent</artifactId>虽然也可以继承 spring-boot-dependencies的dependencyManagement 配置，
                但 spring-boot-parent 中的插件配置 pluginManagement 是无法继承的，因为import依赖范围只能作用于dependencyManagement配置。-->
                <scope>import</scope>
            </dependency>
        </dependencies>
    </dependencyManagement>

    <build>
        <!--父模块有的插件，子模块即便没有显示引入此插件，依旧会继承父模块配置的插件-->
        <plugins>
            <plugin>
                <!-- 用于声明编译的相关配置，若不声明，则maven采用默认的相关配置 -->
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-compiler-plugin</artifactId>
                <version>3.8.0</version>
                <!--插件配置-->
                <configuration>
                    <!--声明源代码的jdk版本-->
                    <source>17</source>
                    <!--声明生成目标的jdk版本-->
                    <target>17</target>
                    <!--声明编译文件的编码-->
                    <encoding>UTF-8</encoding>
                </configuration>
            </plugin>
            <plugin>
                <!--maven-resources-plugin插件负责处理项目资源文件并拷贝到输出目录-->
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-resources-plugin</artifactId>
                <version>2.6</version>
                <configuration>
                    <!--通过<configuration>指定编码为UTF-8-->
                    <encoding>UTF-8</encoding>
                    <!--禁止对某些资源文件进行过滤（即占位符替代），如图片文件进行过滤将导致文件被破坏-->
                    <nonFilteredFileExtensions>
                        <nonFilteredFileExtension>xlsx</nonFilteredFileExtension>
                        <nonFilteredFileExtension>html</nonFilteredFileExtension>
                        <nonFilteredFileExtension>pdf</nonFilteredFileExtension>
                        <nonFilteredFileExtension>ttf</nonFilteredFileExtension>
                    </nonFilteredFileExtensions>
                </configuration>
            </plugin>
        </plugins>
        <!-- resources标签用来标识项目在编译运行时需要额外编译的文件。例如手工引入jar包、不同运行环境对应不同的profile。-->
        <resources>
            <!--有时候，比如mybatis的mapper.xml文件，我们习惯把它和Mapper.java放在一起，都在src/main/java下面。
            这样利用maven打包时，就需要修改pom.xml文件，来把mapper.xml文件一起打包进jar或者war里了；否则，这些文件不会被打包的-->
            <resource>
                <!--通常java目录中的文件会被打包在jar包的根目录下。目录结构同package。
                如com/zea/cloud/user/mapper/UserMapper.java文件在jar包的com/zea/cloud/user/mapper目录下-->
                <directory>${project.basedir}/src/main/java</directory>
                <!--对资源进行过滤，Maven将在构建过程中替换资源文件中的占位符（例如将mapper文件中的 ${table.name} 替换为配置文件中的值-->
                <filtering>true</filtering>
            </resource>
            <!--由于上述手动指定了额外的文件夹，会覆盖原有默认的配置,所以这里需要重新指定classpath资源文件的位置-->
            <resource>
                <!--通常resources中的文件会被打包在jar包中的META-INF目标下。
                但resources下的子目录（比如resources/mapper文件夹）中的文件会被打包在jar包的根目录下，和META-INF目录同级-->
                <directory>${project.basedir}/src/main/resources</directory>
                <filtering>true</filtering>
            </resource>
            <!--手动指定需要额外打包编译的文件位置-->
            <resource>
                <directory>${project.basedir}/bin</directory>
                <!--targetPath:指定<directory>中的资源文件在build后存放的文件夹路径，默认是${project.build.directory}目录（即target目录）-->
                <targetPath>/bin</targetPath>
                <filtering>true</filtering>
            </resource>
        </resources>
    </build>
</project>
